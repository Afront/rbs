# [Object](Object) is the default root of all Ruby
# objects. [Object](Object) inherits from
# [BasicObject](https://ruby-doc.org/core-2.6.3/BasicObject.html) which
# allows creating alternate object hierarchies. Methods on
# [Object](Object) are available to all classes unless
# explicitly overridden.
# 
# [Object](Object) mixes in the
# [Kernel](https://ruby-doc.org/core-2.6.3/Kernel.html) module, making the
# built-in kernel functions globally accessible. Although the instance
# methods of [Object](Object) are defined by the
# [Kernel](https://ruby-doc.org/core-2.6.3/Kernel.html) module, we have
# chosen to document them here for clarity.
# 
# When referencing constants in classes inheriting from
# [Object](Object) you do not need to use the full
# namespace. For example, referencing `File` inside `YourClass` will find
# the top-level [File](https://ruby-doc.org/core-2.6.3/File.html) class.
# 
# In the descriptions of Object's methods, the parameter *symbol* refers
# to a symbol, which is either a quoted string or a
# [Symbol](https://ruby-doc.org/core-2.6.3/Symbol.html) (such as `:name`
# ).
class Object < BasicObject
  include Kernel

  def !~: (untyped) -> bool

  def <=>: (untyped) -> Integer?

  def ===: (untyped) -> bool

  def =~: (untyped) -> bool

  def class: -> untyped

  def clone: (?freeze: bool) -> self

  def define_singleton_method: (Symbol, Method | UnboundMethod) -> Symbol
                             | (Symbol) { (*untyped) -> untyped } -> Symbol

  def display: (?_Writeable port) -> void

  def dup: -> self

  def enum_for: (Symbol method, *untyped args) ?{ (*untyped args) -> Integer } -> Enumerator[untyped, untyped]
              | (*untyped args) ?{ (*untyped args) -> Integer } -> Enumerator[untyped, untyped]

  def eql?: (untyped) -> bool

  def `extend`: (*Module) -> self

  def freeze: () -> self

  def frozen: () -> bool

  def hash: () -> Integer

  def inspect: () -> String

  def instance_of?: ()

# :instance_of?,
# :instance_variable_defined?,
# :instance_variable_get,
# :instance_variable_set,
# :instance_variables,
# :is_a?,
# :itself,
# :kind_of?,
# :method,
# :methods,
# :nil?,
# :object_id,
# :pretty_inspect,
# :private_methods,
# :protected_methods,
# :public_method,
# :public_methods,
# :public_send,
# :remove_instance_variable,
# :respond_to?,
# :send,
# :singleton_class,
# :singleton_method,
# :singleton_methods,
# :taint,
# :tainted?,
# :tap,
# :then,
# :to_enum,
# :to_s,
# :trust,
# :untaint,
# :untrust,
# :untrusted?,
# :yield_self
end

interface _Writeable
  def write: (untyped) -> void
end
